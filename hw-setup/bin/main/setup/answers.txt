## CSE 331 hw-setup Questions
## Part 7: Answering Questions About the Code

1. Why did Fibonacci fail the testThrowsIllegalArgumentException< test? What (if anything) did
you have to do to fix it? If you did not have to change anything to fix this issue, explain why.
- Fibonacci failed the testThrowsIllegalArgumentException because when you passed 0 as a parameter, the
Fibonacci.getFibTerm() would interpret it as a negative number and throw an exception. The testThrowsIllegalArgumentException
tests this by passing 0 as a parameter and will catch an exception if the program throws one. In order to fix this
issue, I changed the condition when the Fibonacci program will throw exception from "<= 0" to strictly "< 0".


2. Why did Fibonacci fail the testBaseCase test? What (if anything) did you have to do to fix
it? If you did not have to change anything to fix this issue, explain why.
- Fibonacci failed the testBaseCase test because the testBaseCase test checks that when 0 is passed
as a parameter to Fibonacci.getFibTerm(), it would return 1. However, when 0 is passed as a parameter to
Fibonacci.getFibTerm(), it would throw an exception because of the first condition "<= 0". In order to fix this bug,
I changed the first condition to "< 0" and then in the first else if case, I changed it from "<= 2" to "== 0 || == 1"
to check when the parameter is 0 or 1 it would return 1.


3.Why did Fibonacci fail the testInductiveCase test? What (if anything) did you have to do to
fix it? If you did not have to change anything to fix this issue, explain why.
- Fibonacci failed the testInductiveCase test because the test checks for whether passing the parameter
{2, 3, 4, 5, 6, 7} to Fibonacci.getFibTerm() it will output the expected value, however when passing 2, the program
outputs 1 instead of the expected value 2. In order to fix this bug, I changed the first else if statement from
"<=2" to "== 0 || == 1" so that it would not return 1 when passing in 2, and instead enter the else statement which
would result in the expected output.


## Part 8: Debugger Tutorial

1. What are the values of "x", "y", and "sum" printed by your statement? Why was x not equal 
to the first integer entered here, and how could we fix this?
- The values of x, y, and sum were 4, 4, and 0 respectively. x was not equal to the first integer entered
(which is 5) because the assignment statement for x is "x = 2 * (console.nextInt() / 2)". This assignment statement
involves integer division which is different from mathematical division so the 2 doesn't just cancel out i.e., if
the input is an odd number it would round down and give an unexpected value which is the case for the input 5. 5 / 2 in
integer division gives = 2 and multiplied it by 2 gives us 4 which is not equals to 5. To fix this bug, we can simply
remove the division along with the multiplication, giving us "int x = console.nextInt()".


2. What are all the names and values listed in the “Variables” panel? What does the “frames” 
tab list as the current method and line number? (Write down the text that was highlighted when 
the Debug perspective first opened.)
- In the "Variables" panel there are "x = 3" and "y = 4". The frames tab list the current method
as computeSum(), with the line number being 43 ("computeSum:43, Adder(setup)").


3. What are all the names and values listed in the “Variables” panel after each of the two step overs?
After the first step over:
- In the "Variables" panel there are "x = 3", "y = 4".
After the second step over:
- In the "Variables" panel there are "x = 3", "y = 4", and "sum = -1".

